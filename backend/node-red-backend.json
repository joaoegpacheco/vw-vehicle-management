[
    {
        "id": "b8b6a01e78378677",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "7a21863977466117",
        "type": "junction",
        "z": "b8b6a01e78378677",
        "x": 580,
        "y": 440,
        "wires": [
            []
        ]
    },
    {
        "id": "auth-login",
        "type": "http in",
        "z": "b8b6a01e78378677",
        "name": "Login",
        "url": "/login",
        "method": "post",
        "x": 90,
        "y": 440,
        "wires": [
            [
                "process-login",
                "145bb3aff2e9c113"
            ]
        ]
    },
    {
        "id": "process-login",
        "type": "function",
        "z": "b8b6a01e78378677",
        "name": "Process Login",
        "func": "const jwt = global.get(\"jwt\");\nconst bcrypt = global.get(\"bcrypt\");\n\nif (!msg.payload || !msg.payload.name || !msg.payload.password) {\n    msg.payload = { error: \"Nome e senha são obrigatórios\" };\n    msg.statusCode = 400;\n    return msg;\n}\n\nconst { name, password } = msg.payload;\n\nconst users = flow.get(\"users\") || [];\n\nconst user = users.find(u => u.name === name);\nif (!user) {\n    msg.payload = { error: \"Usuário não encontrado\" };\n    msg.statusCode = 401;\n    return msg;\n}\n\nconst isMatch = bcrypt.compareSync(password, user.password);\nif (!isMatch) {\n    msg.payload = { error: \"Senha incorreta\" };\n    msg.statusCode = 401;\n    return msg;\n}\n\nconst token = jwt.sign(\n    { uuid: user.uuid, name: user.name, isRoot: user.isRoot }, \n    \"secreta\", \n    { expiresIn: \"1h\" }\n);\n\nmsg.payload = { token };\nmsg.statusCode = 200;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 440,
        "wires": [
            [
                "b9e3871408deb96f"
            ]
        ]
    },
    {
        "id": "verify-token",
        "type": "function",
        "z": "b8b6a01e78378677",
        "name": "Verify Token",
        "func": "const jwt = global.get(\"jwt\");\n\nif (!msg.headers || !msg.headers.Authorization) {\n    msg.payload = { error: \"Cabeçalho Authorization é obrigatório\" };\n    msg.statusCode = 401;\n    return msg;\n}\n\nconst authHeader = msg.headers.Authorization;\nconst token = authHeader.split(\" \")[1];\n\nif (!token) {\n    msg.payload = { error: \"Token JWT não encontrado no cabeçalho Authorization\" };\n    msg.statusCode = 401;\n    return msg;\n}\n\ntry {\n    const decoded = jwt.verify(token, \"secreta\");\n    msg.user = decoded; \n\n    return msg;\n} catch (err) {\n    msg.payload = { error: \"Token JWT inválido ou expirado\", detalhes: err.message };\n    msg.statusCode = 401;\n    return msg;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "create-user",
        "type": "http in",
        "z": "b8b6a01e78378677",
        "name": "Create User",
        "url": "/users",
        "method": "post",
        "x": 110,
        "y": 140,
        "wires": [
            [
                "process-create-user",
                "145bb3aff2e9c113"
            ]
        ]
    },
    {
        "id": "process-create-user",
        "type": "function",
        "z": "b8b6a01e78378677",
        "name": "Process Create User",
        "func": "const bcrypt = global.get(\"bcrypt\");\nconst crypto = global.get(\"crypto\");\n\nif (!msg.payload || !msg.payload.name || !msg.payload.password) {\n    msg.payload = { error: \"Nome e senha são obrigatórios\" };\n    msg.statusCode = 400;\n    return msg;\n}\n\nconst { name, password, isRoot, isActived } = msg.payload;\n\nlet users = flow.get(\"users\") || [];\n\nconst userExists = users.find(u => u.name === name);\nif (userExists) {\n    msg.payload = { error: \"Usuário já existe\" };\n    msg.statusCode = 400;\n    return msg;\n}\n\nconst newUser = {\n    uuid: crypto.randomUUID(),\n    name,\n    password: bcrypt.hashSync(password, 10),\n    isRoot: isRoot || false,\n    isActived: isActived !== undefined ? isActived : true\n};\n\nusers.push(newUser);\nflow.set(\"users\", users); \n\nmsg.payload = { message: \"Usuário criado com sucesso\", user: newUser };\nmsg.statusCode = 201;\nreturn msg;",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 140,
        "wires": [
            [
                "75a0d7be0e477f61"
            ]
        ]
    },
    {
        "id": "create-vehicle",
        "type": "http in",
        "z": "b8b6a01e78378677",
        "name": "Create Vehicle",
        "url": "/vehicles",
        "method": "post",
        "x": 110,
        "y": 200,
        "wires": [
            [
                "verify-token",
                "process-create-vehicle",
                "145bb3aff2e9c113"
            ]
        ]
    },
    {
        "id": "process-create-vehicle",
        "type": "function",
        "z": "b8b6a01e78378677",
        "name": "Process Create Vehicle",
        "func": "const crypto = global.get(\"crypto\");\n\nif (!msg.payload || !msg.payload.creationUserName || !msg.payload.model || !msg.payload.color || !msg.payload.year || !msg.payload.imagePath) {\n    msg.payload = { error: \"Todos os campos são obrigatórios (creationUserName, model, color, year, imagePath)\" };\n    msg.statusCode = 400;\n    return msg;\n}\n\nconst { creationUserName, model, color, year, imagePath } = msg.payload;\n\nlet vehicles = flow.get(\"vehicles\") || [];\n\nconst newVehicle = {\n    uuid: crypto.randomUUID(), \n    creationUserName,\n    updatedUserName: creationUserName,\n    creationDate: new Date().toISOString(),\n    updatedDate: new Date().toISOString(),\n    model,\n    color,\n    year,\n    imagePath\n};\n\nvehicles.push(newVehicle);\nflow.set(\"vehicles\", vehicles); \n\nlet logs = flow.get(\"logs\") || [];\nlogs.push(`[${new Date().toISOString()}][${creationUserName}][POST /vehicles]: ${JSON.stringify(newVehicle)}`);\nflow.set(\"logs\", logs);\n\nmsg.payload = { message: \"Veículo cadastrado com sucesso\", vehicle: newVehicle };\nmsg.statusCode = 201;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 200,
        "wires": [
            [
                "963f3c5977d9a986"
            ]
        ]
    },
    {
        "id": "get-vehicles",
        "type": "http in",
        "z": "b8b6a01e78378677",
        "name": "Get Vehicles",
        "url": "/vehicles",
        "method": "get",
        "x": 110,
        "y": 260,
        "wires": [
            [
                "verify-token",
                "process-get-vehicles",
                "145bb3aff2e9c113"
            ]
        ]
    },
    {
        "id": "process-get-vehicles",
        "type": "function",
        "z": "b8b6a01e78378677",
        "name": "Process Get Vehicles",
        "func": "let vehicles = flow.get(\"vehicles\") || [];\n\nlet { page, limit, search, sortBy, order } = msg.req.query;\n\nif (search) {\n    const searchLower = search.toLowerCase();\n    vehicles = vehicles.filter(v =>\n        v.model.modeName.toLowerCase().includes(searchLower) ||\n        v.color.colorName.toLowerCase().includes(searchLower) ||\n        v.creationUserName.toLowerCase().includes(searchLower)\n    );\n}\n\nif (sortBy) {\n    const orderFactor = order === \"desc\" ? -1 : 1;\n    vehicles.sort((a, b) => (a[sortBy] > b[sortBy] ? orderFactor : -orderFactor));\n}\n\npage = parseInt(page) || 1;\nlimit = parseInt(limit) || 10;\nconst startIndex = (page - 1) * limit;\nconst endIndex = startIndex + limit;\nconst paginatedVehicles = vehicles.slice(startIndex, endIndex);\n\nmsg.payload = {\n    total: vehicles.length,\n    page,\n    limit,\n    vehicles: paginatedVehicles\n};\nmsg.statusCode = 200;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 260,
        "wires": [
            [
                "63edb0e3a7aa9e33"
            ]
        ]
    },
    {
        "id": "delete-vehicle",
        "type": "http in",
        "z": "b8b6a01e78378677",
        "name": "Delete Vehicle",
        "url": "/vehicles/:id",
        "method": "delete",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 380,
        "wires": [
            [
                "verify-token",
                "process-delete-vehicle",
                "145bb3aff2e9c113"
            ]
        ]
    },
    {
        "id": "process-delete-vehicle",
        "type": "function",
        "z": "b8b6a01e78378677",
        "name": "Process Delete Vehicle",
        "func": "const vehicleId = msg.req.params.id;\n\nlet vehicles = flow.get(\"vehicles\") || [];\n\nconst vehicleIndex = vehicles.findIndex(v => v.uuid === vehicleId);\nif (vehicleIndex === -1) {\n    msg.payload = { error: \"Veículo não encontrado\" };\n    msg.statusCode = 404;\n    return msg;\n}\n\nconst requestingUser = msg.req.headers[\"x-user\"] || \"desconhecido\";\n\nconst deletedVehicle = vehicles.splice(vehicleIndex, 1)[0];\nflow.set(\"vehicles\", vehicles);\n\nlet logs = flow.get(\"logs\") || [];\nlogs.push(`[${new Date().toISOString()}][${requestingUser}][DELETE /vehicles]: ${JSON.stringify(deletedVehicle)}`);\nflow.set(\"logs\", logs);\n\nmsg.payload = { message: \"Veículo excluído com sucesso\", vehicle: deletedVehicle };\nmsg.statusCode = 200;\nreturn msg;\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 380,
        "wires": [
            [
                "fec6fd277f2c3efb"
            ]
        ]
    },
    {
        "id": "145bb3aff2e9c113",
        "type": "function",
        "z": "b8b6a01e78378677",
        "name": "Log Action",
        "func": "const { user, req } = msg;\n\nif (!user || !user.name) {\n    msg.payload = { error: \"Usuário não identificado. Verifique a autenticação.\" };\n    msg.statusCode = 401;\n    return msg;\n}\n\nconst route = req && req.route ? req.route : \"Rota desconhecida\";\n\nmsg.log = `[${new Date().toISOString()}] [Usuário: ${user.name}] [${route}]`;\nnode.warn(msg.log);\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 550,
        "y": 640,
        "wires": [
            [
                "verify-token"
            ]
        ]
    },
    {
        "id": "c31e3f700199871a",
        "type": "http in",
        "z": "b8b6a01e78378677",
        "name": "Put Vehicles",
        "url": "/vehicles/:id",
        "method": "put",
        "upload": false,
        "swaggerDoc": "",
        "x": 110,
        "y": 320,
        "wires": [
            [
                "verify-token",
                "145bb3aff2e9c113",
                "fa4aa04b11d031be"
            ]
        ]
    },
    {
        "id": "fa4aa04b11d031be",
        "type": "function",
        "z": "b8b6a01e78378677",
        "name": "Process Update Vehicles",
        "func": "if (!msg.payload || !msg.payload.uuid || !msg.payload.updatedUserName) {\n    node.error(\"Erro: Dados inválidos para atualização do veículo.\", msg);\n    return null;\n}\n\nlet updatedVehicle = {\n    uuid: msg.payload.uuid,\n    model: msg.payload.model || \"\",\n    color: msg.payload.color || \"\",\n    year: msg.payload.year || 0,\n    imagePath: msg.payload.imagePath || \"\",\n    updatedUserName: msg.payload.updatedUserName,\n    updatedAt: new Date().toISOString() \n};\n\nmsg.payload = updatedVehicle;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 320,
        "wires": [
            [
                "663c099bbf5fe9e7"
            ]
        ]
    },
    {
        "id": "75a0d7be0e477f61",
        "type": "http response",
        "z": "b8b6a01e78378677",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 140,
        "wires": []
    },
    {
        "id": "963f3c5977d9a986",
        "type": "http response",
        "z": "b8b6a01e78378677",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 200,
        "wires": []
    },
    {
        "id": "63edb0e3a7aa9e33",
        "type": "http response",
        "z": "b8b6a01e78378677",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 260,
        "wires": []
    },
    {
        "id": "663c099bbf5fe9e7",
        "type": "http response",
        "z": "b8b6a01e78378677",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 320,
        "wires": []
    },
    {
        "id": "fec6fd277f2c3efb",
        "type": "http response",
        "z": "b8b6a01e78378677",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 380,
        "wires": []
    },
    {
        "id": "b9e3871408deb96f",
        "type": "http response",
        "z": "b8b6a01e78378677",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 440,
        "wires": []
    },
    {
        "id": "d222f6092d05c804",
        "type": "inject",
        "z": "b8b6a01e78378677",
        "name": "Global",
        "props": [
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 60,
        "wires": [
            [
                "ba3a7a8790be6ec7"
            ]
        ]
    },
    {
        "id": "ba3a7a8790be6ec7",
        "type": "function",
        "z": "b8b6a01e78378677",
        "name": "Store Colors and Templates",
        "func": "const colorsGlobal = [\n    { uuid: '1', colorName: 'Preto' },\n    { uuid: '2', colorName: 'Branco' },\n    { uuid: '3', colorName: 'Vermelho' },\n    { uuid: '4', colorName: 'Cinza' },\n    { uuid: '5', colorName: 'Azul' }\n];\n\nconst modelsGlobal = [\n    { uuid: '1', modelName: 'T-Cross' },\n    { uuid: '2', modelName: 'Nivus' },\n    { uuid: '3', modelName: 'Polo' },\n    { uuid: '4', modelName: 'Virtus' },\n    { uuid: '5', modelName: 'Saveiro' },\n    { uuid: '6', modelName: 'Track' }\n];\n\nglobal.set('colors', colorsGlobal);\nglobal.set('models', modelsGlobal);\n\nmsg.payload = { colors: colorsGlobal, models: modelsGlobal };\nmsg.statusCode = 200;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 60,
        "wires": [
            [
                "6134d03c3755e56c"
            ]
        ]
    },
    {
        "id": "01e668fe94d3ba5d",
        "type": "http in",
        "z": "b8b6a01e78378677",
        "name": "Get Colors and Models",
        "url": "/colors-and-models",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 140,
        "y": 20,
        "wires": [
            [
                "ba3a7a8790be6ec7"
            ]
        ]
    },
    {
        "id": "6134d03c3755e56c",
        "type": "http response",
        "z": "b8b6a01e78378677",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 830,
        "y": 60,
        "wires": []
    }
]