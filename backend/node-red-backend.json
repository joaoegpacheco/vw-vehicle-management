[
  {
      "id": "b8b6a01e78378677",
      "type": "tab",
      "label": "Flow 2",
      "disabled": false,
      "info": "",
      "env": []
  },
  {
      "id": "7a21863977466117",
      "type": "junction",
      "z": "b8b6a01e78378677",
      "x": 580,
      "y": 360,
      "wires": [
          []
      ]
  },
  {
      "id": "auth-login",
      "type": "http in",
      "z": "b8b6a01e78378677",
      "name": "Login",
      "url": "/login",
      "method": "post",
      "x": 90,
      "y": 360,
      "wires": [
          [
              "process-login"
          ]
      ]
  },
  {
      "id": "process-login",
      "type": "function",
      "z": "b8b6a01e78378677",
      "name": "Process Login",
      "func": "const jwt = global.get(\"jwt\");\nconst bcrypt = global.get(\"bcrypt\");\n\nif (!msg.payload || !msg.payload.name || !msg.payload.password) {\n    msg.payload = { error: \"Nome e senha são obrigatórios\" };\n    msg.statusCode = 400;\n    return msg;\n}\n\nconst { name, password } = msg.payload;\n\nconst users = flow.get(\"users\") || [];\n\nconst user = users.find(u => u.name === name);\nif (!user) {\n    msg.payload = { error: \"Usuário não encontrado\" };\n    msg.statusCode = 401;\n    return msg;\n}\n\nconst isMatch = bcrypt.compareSync(password, user.password);\nif (!isMatch) {\n    msg.payload = { error: \"Senha incorreta\" };\n    msg.statusCode = 401;\n    return msg;\n}\n\nconst token = jwt.sign(\n    { uuid: user.uuid, name: user.name, isRoot: user.isRoot }, \n    \"secreta\", \n    { expiresIn: \"1h\" }\n);\n\nmsg.payload = { token };\nmsg.statusCode = 200;\nreturn msg;",
      "outputs": 1,
      "timeout": "",
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 560,
      "y": 360,
      "wires": [
          [
              "4c4a3fc96befa010"
          ]
      ]
  },
  {
      "id": "verify-token",
      "type": "function",
      "z": "b8b6a01e78378677",
      "name": "Verify Token",
      "func": "const jwt = global.get(\"jwt\");\n\nconst authHeader = msg.headers && msg.headers.Authorization;\nif (!authHeader) {\n    msg.payload = { error: \"Cabeçalho Authorization é obrigatório\" };\n    msg.statusCode = 401;\n    return msg;\n}\n\nconst token = authHeader.split(' ')[1];\nif (!token) {\n    msg.payload = { error: \"Token JWT não encontrado no cabeçalho Authorization\" };\n    msg.statusCode = 401;\n    return msg;\n}\n\ntry {\n    const decoded = jwt.verify(token, \"secreta\"); \n    msg.user = decoded;  \n} catch (err) {\n    msg.payload = { error: \"Token JWT inválido ou expirado\" };\n    msg.statusCode = 401;\n    return msg;\n}",
      "outputs": 1,
      "timeout": "",
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 550,
      "y": 460,
      "wires": [
          []
      ]
  },
  {
      "id": "create-user",
      "type": "http in",
      "z": "b8b6a01e78378677",
      "name": "Create User",
      "url": "/users",
      "method": "post",
      "x": 110,
      "y": 60,
      "wires": [
          [
              "process-create-user"
          ]
      ]
  },
  {
      "id": "process-create-user",
      "type": "function",
      "z": "b8b6a01e78378677",
      "name": "Process Create User",
      "func": "const bcrypt = global.get(\"bcrypt\");\nconst crypto = global.get(\"crypto\");\n\nif (!msg.payload || !msg.payload.name || !msg.payload.password) {\n    msg.payload = { error: \"Nome e senha são obrigatórios\" };\n    msg.statusCode = 400;\n    return msg;\n}\n\nconst { name, password, isRoot, isActived } = msg.payload;\n\nlet users = flow.get(\"users\") || [];\n\nconst userExists = users.find(u => u.name === name);\nif (userExists) {\n    msg.payload = { error: \"Usuário já existe\" };\n    msg.statusCode = 400;\n    return msg;\n}\n\nconst newUser = {\n    uuid: crypto.randomUUID(),\n    name,\n    password: bcrypt.hashSync(password, 10),\n    isRoot: isRoot || false,\n    isActived: isActived !== undefined ? isActived : true\n};\n\nusers.push(newUser);\nflow.set(\"users\", users); \n\nmsg.payload = { message: \"Usuário criado com sucesso\", user: newUser };\nmsg.statusCode = 201;\nreturn msg;",
      "outputs": 1,
      "timeout": "",
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 580,
      "y": 60,
      "wires": [
          [
              "5e3dbc1df4eb0c7e"
          ]
      ]
  },
  {
      "id": "create-vehicle",
      "type": "http in",
      "z": "b8b6a01e78378677",
      "name": "Create Vehicle",
      "url": "/vehicles",
      "method": "post",
      "x": 110,
      "y": 120,
      "wires": [
          [
              "verify-token",
              "process-create-vehicle"
          ]
      ]
  },
  {
      "id": "process-create-vehicle",
      "type": "function",
      "z": "b8b6a01e78378677",
      "name": "Process Create Vehicle",
      "func": "const crypto = global.get(\"crypto\");\n\nif (!msg.payload || !msg.payload.creationUserName || !msg.payload.model || !msg.payload.color || !msg.payload.year || !msg.payload.imagePath) {\n    msg.payload = { error: \"Todos os campos são obrigatórios (creationUserName, model, color, year, imagePath)\" };\n    msg.statusCode = 400;\n    return msg;\n}\n\nconst { creationUserName, model, color, year, imagePath } = msg.payload;\n\nlet vehicles = flow.get(\"vehicles\") || [];\n\nconst newVehicle = {\n    uuid: crypto.randomUUID(), \n    creationUserName,\n    updatedUserName: creationUserName,\n    creationDate: new Date().toISOString(),\n    updatedDate: new Date().toISOString(),\n    model,\n    color,\n    year,\n    imagePath\n};\n\nvehicles.push(newVehicle);\nflow.set(\"vehicles\", vehicles); \n\nlet logs = flow.get(\"logs\") || [];\nlogs.push(`[${new Date().toISOString()}][${creationUserName}][POST /vehicles]: ${JSON.stringify(newVehicle)}`);\nflow.set(\"logs\", logs);\n\nmsg.payload = { message: \"Veículo cadastrado com sucesso\", vehicle: newVehicle };\nmsg.statusCode = 201;\nreturn msg;\n",
      "outputs": 1,
      "timeout": "",
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 590,
      "y": 120,
      "wires": [
          [
              "b612b942098ccf58"
          ]
      ]
  },
  {
      "id": "get-vehicles",
      "type": "http in",
      "z": "b8b6a01e78378677",
      "name": "Get Vehicles",
      "url": "/vehicles",
      "method": "get",
      "x": 110,
      "y": 180,
      "wires": [
          [
              "verify-token",
              "process-get-vehicles"
          ]
      ]
  },
  {
      "id": "process-get-vehicles",
      "type": "function",
      "z": "b8b6a01e78378677",
      "name": "Process Get Vehicles",
      "func": "let vehicles = flow.get(\"vehicles\") || [];\n\nlet { page, limit, search, sortBy, order } = msg.req.query;\n\nif (search) {\n    const searchLower = search.toLowerCase();\n    vehicles = vehicles.filter(v =>\n        v.model.modeName.toLowerCase().includes(searchLower) ||\n        v.color.colorName.toLowerCase().includes(searchLower) ||\n        v.creationUserName.toLowerCase().includes(searchLower)\n    );\n}\n\nif (sortBy) {\n    const orderFactor = order === \"desc\" ? -1 : 1;\n    vehicles.sort((a, b) => (a[sortBy] > b[sortBy] ? orderFactor : -orderFactor));\n}\n\npage = parseInt(page) || 1;\nlimit = parseInt(limit) || 10;\nconst startIndex = (page - 1) * limit;\nconst endIndex = startIndex + limit;\nconst paginatedVehicles = vehicles.slice(startIndex, endIndex);\n\nmsg.payload = {\n    total: vehicles.length,\n    page,\n    limit,\n    vehicles: paginatedVehicles\n};\nmsg.statusCode = 200;\nreturn msg;\n",
      "outputs": 1,
      "timeout": "",
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 580,
      "y": 180,
      "wires": [
          [
              "bf37cfdcb63ab08d"
          ]
      ]
  },
  {
      "id": "delete-vehicle",
      "type": "http in",
      "z": "b8b6a01e78378677",
      "name": "Delete Vehicle",
      "url": "/vehicles/:id",
      "method": "delete",
      "x": 110,
      "y": 240,
      "wires": [
          [
              "verify-token",
              "process-delete-vehicle"
          ]
      ]
  },
  {
      "id": "process-delete-vehicle",
      "type": "function",
      "z": "b8b6a01e78378677",
      "name": "Process Delete Vehicle",
      "func": "const vehicleId = msg.req.params.id;\n\nlet vehicles = flow.get(\"vehicles\") || [];\n\nconst vehicleIndex = vehicles.findIndex(v => v.uuid === vehicleId);\nif (vehicleIndex === -1) {\n    msg.payload = { error: \"Veículo não encontrado\" };\n    msg.statusCode = 404;\n    return msg;\n}\n\nconst requestingUser = msg.req.headers[\"x-user\"] || \"desconhecido\";\n\nconst deletedVehicle = vehicles.splice(vehicleIndex, 1)[0];\nflow.set(\"vehicles\", vehicles);\n\nlet logs = flow.get(\"logs\") || [];\nlogs.push(`[${new Date().toISOString()}][${requestingUser}][DELETE /vehicles]: ${JSON.stringify(deletedVehicle)}`);\nflow.set(\"logs\", logs);\n\nmsg.payload = { message: \"Veículo excluído com sucesso\", vehicle: deletedVehicle };\nmsg.statusCode = 200;\nreturn msg;\n",
      "outputs": 1,
      "timeout": "",
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 580,
      "y": 240,
      "wires": [
          [
              "03cb7ad042f44929"
          ]
      ]
  },
  {
      "id": "upload-image",
      "type": "http in",
      "z": "b8b6a01e78378677",
      "name": "Upload Image",
      "url": "/upload",
      "method": "post",
      "x": 110,
      "y": 300,
      "wires": [
          [
              "verify-token",
              "process-upload-image"
          ]
      ]
  },
  {
      "id": "process-upload-image",
      "type": "function",
      "z": "b8b6a01e78378677",
      "name": "Process Upload Image",
      "func": "if (!msg.payload || !msg.payload.filename || !msg.payload.data) {\n    msg.payload = { error: \"Imagem não recebida ou inválida\" };\n    msg.statusCode = 400;\n    return msg;\n}\n\nconst { filename, data } = msg.payload;\n\nconst uploadDir = '/path/to/upload/directory'; \n\nconst fs = require('fs');\nconst path = require('path');\nconst filePath = path.join(uploadDir, filename);\n\nif (!fs.existsSync(uploadDir)) {\n    fs.mkdirSync(uploadDir, { recursive: true });\n}\n\nfs.writeFile(filePath, data, (err) => {\n    if (err) {\n        msg.payload = { error: 'Erro ao salvar a imagem' };\n        msg.statusCode = 500;\n    } else {\n        msg.payload = { \n            message: 'Imagem salva com sucesso',\n            filePath: filePath \n        };\n        msg.statusCode = 200;\n    }\n});\n\nreturn msg;\n",
      "outputs": 1,
      "timeout": "",
      "noerr": 0,
      "initialize": "",
      "finalize": "",
      "libs": [],
      "x": 580,
      "y": 300,
      "wires": [
          []
      ]
  },
  {
      "id": "4c4a3fc96befa010",
      "type": "http response",
      "z": "b8b6a01e78378677",
      "name": "",
      "statusCode": "",
      "headers": {},
      "x": 790,
      "y": 360,
      "wires": []
  },
  {
      "id": "5e3dbc1df4eb0c7e",
      "type": "http response",
      "z": "b8b6a01e78378677",
      "name": "",
      "statusCode": "",
      "headers": {},
      "x": 810,
      "y": 60,
      "wires": []
  },
  {
      "id": "b612b942098ccf58",
      "type": "http response",
      "z": "b8b6a01e78378677",
      "name": "",
      "statusCode": "",
      "headers": {},
      "x": 810,
      "y": 120,
      "wires": []
  },
  {
      "id": "bf37cfdcb63ab08d",
      "type": "http response",
      "z": "b8b6a01e78378677",
      "name": "",
      "statusCode": "",
      "headers": {},
      "x": 810,
      "y": 180,
      "wires": []
  },
  {
      "id": "03cb7ad042f44929",
      "type": "http response",
      "z": "b8b6a01e78378677",
      "name": "",
      "statusCode": "",
      "headers": {},
      "x": 810,
      "y": 240,
      "wires": []
  }
]